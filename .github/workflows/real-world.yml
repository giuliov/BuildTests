name: real-world

on:
  push:
    branches:
      - real-world
    tags:
      - v*
  pull_request:
    branches:
      - real-world
    tags:
      - v*

env:
  EMULATE: 1
  
jobs:

  build:
    runs-on: ubuntu-latest
    outputs:
      versionTag: ${{ steps.gitversion.outputs.fullSemVer }}
    steps:
    - uses: actions/checkout@v1
    # required for GitVersion
    - name: Fetch all history for all tags and branches
      run: |
        git fetch --prune
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.4
      with:
          versionSpec: '5.2.x'
    - name: Run GitVersion
      id: gitversion # step id used as reference for output values
      uses: gittools/actions/gitversion/execute@v0.9.4
    - name: Dump version numbers
      run: |
        echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
        echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
        echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
        echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
        echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
        echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
        echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
        echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
        echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
        echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
        echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
        echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
        echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
    - name: Build
      run: dotnet build DummyConsoleApp3/DummyConsoleApp3.csproj
    - name: Publish
      run: dotnet publish DummyConsoleApp3/DummyConsoleApp3.csproj -o out -c Release
    - name: Upload artifact
      if: startsWith(github.ref, 'refs/tags/v') || env.EMULATE == '1'
      uses: actions/upload-artifact@v2
      with:
        name: published
        path: out/**
    - name: Generate pseudo-tags
      run: |
        mkdir tags
        echo . > tags/tag1
        echo . > tags/tag2
    - name: Upload tags
      uses: actions/upload-artifact@v2
      with:
        name: tags
        path: 'tags/*'
        

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Download artifact
      if: startsWith(github.ref, 'refs/tags/v') || env.EMULATE == '1'
      uses: actions/download-artifact@v2
      with:
        name: published
        path: out/
    - name: Check output
      if: startsWith(github.ref, 'refs/tags/v') || env.EMULATE == '1'
      run: |
        echo "versionTag: ${{ needs.build.outputs.versionTag }}"
        ls -R ./out
    - name: Download tags
      uses: actions/download-artifact@v2
      with:
        name: tags
        path: 'tags/'
    - name: Push manifest
      run: |
        pushd tags
        amends=""; for tag in *; do amends=$amends" --amend dummy:${tag}"; done
        popd
        echo $amends
